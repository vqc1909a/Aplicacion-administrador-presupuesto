{"version":3,"sources":["components/Header.js","components/Error.js","components/Success.js","components/Question.js","components/Form.js","components/Gasto.js","helpers/definirColorRestante.js","components/Listado.js","components/Gastos.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","id","Error","message","Success","Question","agregarPresupuesto","agregarRestante","estado","useState","value","success","error","presupuesto","changePresupuesto","onSubmit","e","preventDefault","trim","sucess","isNaN","parseInt","type","placeholder","onChange","target","Gasto","agregarGasto","restante","name","costo","gasto","changeGasto","handleGasto","uuid","htmlFor","eliminarGasto","onClick","definirColorRestante","Listado","gastos","TransitionGroup","component","map","CSSTransition","key","timeout","classNames","Gastos","changeRestante","changeGastos","useEffect","total","forEach","Form","newgastos","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.1c3fb50f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Header = ({title}) => {\r\n     return (\r\n          <header className=\"header py-4\" id=\"header\">\r\n               <div className=\"container\">\r\n                    <div className=\"row\">\r\n                         <div className=\"col text-center\">\r\n                              <h1 className=\"display-4\">{title}</h1>\r\n                         </div>\r\n                    </div>\r\n               </div>\r\n          </header>\r\n     );\r\n}\r\nHeader.propTypes = {\r\n     title: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Error = ({message}) => {\r\n     return (\r\n          <div className=\"alert alert-danger\">{message}</div>\r\n     );\r\n}\r\nError.propTypes = {\r\n     message: PropTypes.string.isRequired\r\n}\r\nexport default Error;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Success = ({message}) => {\r\n     return (\r\n          <div className=\"alert alert-success\">{message}</div>\r\n     );\r\n}\r\nSuccess.propTypes = {\r\n     message: PropTypes.string.isRequired\r\n}\r\nexport default Success;","import React ,{useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Error from './Error';\r\nimport Success from './Success';\r\n\r\nconst Question = ({title, agregarPresupuesto, agregarRestante, estado}) => {\r\n     const [presupuesto, changePresupuesto] = useState({\r\n          value: '',\r\n          success: '',\r\n          error: ''\r\n     });\r\n     const {value, success, error} = presupuesto;\r\n\r\n     const handlePresupuesto = (e) => {\r\n          changePresupuesto({\r\n               ...presupuesto,\r\n               value: e.target.value\r\n          });\r\n     }\r\n     const handleSubmit = (e) => {\r\n          e.preventDefault();\r\n          if(value.trim() === ''){\r\n               changePresupuesto({\r\n                    ...presupuesto,\r\n                    error: \"El campo es requerido\",\r\n                    success: ''\r\n               });\r\n               return null;\r\n          }\r\n          changePresupuesto({\r\n               ...presupuesto,\r\n               error: \"\",\r\n               sucess: \"\"\r\n          });\r\n          if(isNaN(parseInt(value)) || parseInt(value) < 1){\r\n               changePresupuesto({\r\n                    ...presupuesto,\r\n                    error: \"Ingrese un nÃºmero valido por favor\",\r\n                    success: ''\r\n               });\r\n               return null;\r\n          }\r\n          agregarPresupuesto(parseInt(value));\r\n          agregarRestante(parseInt(value));\r\n          changePresupuesto({\r\n               value: '',\r\n               error: '',\r\n               success: 'Presupuesto Agregado'\r\n          });\r\n     }\r\n     if(estado) return null;\r\n\r\n     return (\r\n          <section className=\"question py-4\">\r\n               <div className=\"container\">\r\n                    <div className=\"row justify-content-center\">\r\n                         <div className=\"col-sm-10 col-md-8\">\r\n                              <div className=\"card bg-primary text-white\">\r\n                                   <header className=\"question-header card-header text-center py-3\">\r\n                                             <h2>{title}</h2>\r\n                                   </header>\r\n                                   <div className=\"question-body card-body\">\r\n                                        {error ? <Error message={error}></Error>: null}\r\n                                        {success ? <Success message={success}></Success> : null}\r\n                                        <form onSubmit={handleSubmit}>\r\n                                             <div className=\"form-group\">\r\n                                                  <input type=\"text\" placeholder=\"Presupuesto\" value={value} className=\"form-control\" onChange={handlePresupuesto}/>\r\n                                             </div>\r\n                                             <button className=\"btn btn-outline-light btn-block\">Definir presupuesto</button>\r\n                                        </form>\r\n                                   </div>\r\n                              </div>\r\n                         </div>\r\n                    </div>\r\n               </div>\r\n          </section>\r\n     );\r\n}\r\nQuestion.propTypes = {\r\n     title: PropTypes.string.isRequired,\r\n     agregarPresupuesto: PropTypes.func.isRequired,\r\n     agregarRestante: PropTypes.func.isRequired,\r\n     estado: PropTypes.number.isRequired\r\n}\r\nexport default Question;","import React, {useState} from 'react';\r\nimport Error from './Error';\r\nimport Success from './Success';\r\nimport PropTypes from 'prop-types';\r\nimport {uuid} from 'uuidv4';\r\n\r\nconst Gasto = ({title, agregarGasto, restante}) => {\r\n     const [gasto, changeGasto] = useState({\r\n          name: '',\r\n          costo: '',\r\n          error: '',\r\n          success: ''\r\n     })\r\n     const {name, costo, error, success} = gasto;\r\n\r\n     const handleGasto = (e) => {\r\n          changeGasto({\r\n               ...gasto,\r\n               [e.target.name]: e.target.value\r\n          })\r\n     }\r\n\r\n     const handleSubmit = (e) => {\r\n          e.preventDefault();\r\n          if(name.trim() === '' || costo.trim() === ''){\r\n                changeGasto({\r\n                     ...gasto,\r\n                     error: 'Los campos son obligatorios',\r\n                     success: ''\r\n                })\r\n                return null;\r\n          }\r\n          changeGasto({\r\n               ...gasto,\r\n               error: '',\r\n               success: ''\r\n          })\r\n          if(isNaN(parseInt(costo)) || parseInt(costo) < 1){\r\n               changeGasto({\r\n                    ...gasto,\r\n                    error: 'Por favor ingrese un costo vÃ¡lido',\r\n                    success: ''\r\n               })\r\n               return null;\r\n          }\r\n          changeGasto({\r\n               ...gasto,\r\n               error: '',\r\n               success: ''\r\n          })\r\n          if(restante  === 0){\r\n               changeGasto({\r\n                    ...gasto,\r\n                    error: 'Presupuesto agotado',\r\n                    success: ''\r\n               })\r\n               return null;\r\n          }\r\n          changeGasto({\r\n               ...gasto,\r\n               error: '',\r\n               success: ''\r\n          })\r\n           if (restante - parseInt(costo) < 0) {\r\n                changeGasto({\r\n                     ...gasto,\r\n                     error: 'Presupuesto sobrepasado',\r\n                     success: ''\r\n                })\r\n                return null;\r\n           }\r\n\r\n          agregarGasto({\r\n               ...gasto,\r\n               costo: parseInt(costo),\r\n               id: uuid()\r\n          });\r\n          changeGasto({\r\n               name: '',\r\n               costo: '',\r\n               error: '',\r\n               success: 'Gasto agregado'\r\n          })\r\n     }\r\n     return (\r\n          <div className=\"col-md-6 mb-5\">\r\n               <h2 className=\"text-center mb-4\">{title}</h2>\r\n               {error ? <Error message={error}></Error> : null}\r\n               {success ? <Success message={success}></Success> : null}\r\n\r\n               <form onSubmit={handleSubmit}>\r\n                    <div className=\"form-group\">\r\n                         <label htmlFor=\"name\">Nombre Gasto</label>\r\n                         <input onChange={handleGasto} type=\"text\" placeholder=\"Ej. Transporte\" name=\"name\" className=\"form-control form-control-lg\" value={name} />\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                         <label htmlFor=\"costo\">Costo Gasto</label>\r\n                         <input onChange={handleGasto} type=\"text\" placeholder=\"Ej. 300\" name=\"costo\" className=\"form-control form-control-lg\" value={costo}/>\r\n                    </div>\r\n                    <button className=\"btn btn-primary btn-lg btn-block\">Agregar Gasto</button>\r\n               </form>\r\n          </div>\r\n     );\r\n}\r\n Gasto.propTypes = {\r\n      title: PropTypes.string.isRequired,\r\n      agregarGasto: PropTypes.func.isRequired,\r\n      restante: PropTypes.number.isRequired\r\n }\r\nexport default Gasto;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nconst Gasto = ({gasto, eliminarGasto}) => {\r\n     const {name, costo, id} = gasto\r\n     return (\r\n          <li className=\"list-group-item d-flex justify-content-between align-items-center\">{name}<i className=\"far fa-trash-alt\" onClick={() => eliminarGasto(id)}></i><span className=\"p-3 bg-secondary text-white\">$ {costo}</span></li>\r\n     );\r\n}\r\nGasto.propTypes = {\r\n     gasto: PropTypes.object.isRequired,\r\n     eliminarGasto: PropTypes.func.isRequired\r\n}\r\nexport default Gasto;","const definirColorRestante = (presupuesto, restante) => {\r\n     if (restante >= presupuesto * .5) {\r\n          return 'alert-success'\r\n     } else if (restante < presupuesto * .5 && restante >= presupuesto * .25) {\r\n          return 'alert-warning'\r\n     } else if (restante < presupuesto * .25) {\r\n          return 'alert-danger'\r\n     }\r\n}\r\n \r\nexport default definirColorRestante;","import React from 'react';\r\nimport Gasto from './Gasto';\r\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\r\nimport definirColorRestante from '../helpers/definirColorRestante';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Listado = ({title, gastos, presupuesto, restante, eliminarGasto}) => {\r\n     return (\r\n          <div className=\"col-md-6\">\r\n               <h2 className=\"text-center\">{title}</h2>\r\n               <div className=\"row\">\r\n                    <div className=\"col-sm-6\">\r\n                         <div className=\"alert alert-success\">Presupuesto: ${presupuesto}</div>\r\n                    </div>\r\n                    <div className=\"col-sm-6\">\r\n                         <div className={`alert ${definirColorRestante(presupuesto, restante)}`}>Restante: ${restante}</div>\r\n                    </div>\r\n               </div>\r\n               <ul className=\"list-group list-group-flush\">\r\n                    <TransitionGroup component={null} className=\"gastos\">\r\n                              {gastos.map((gasto) => \r\n                                   <CSSTransition key={gasto.id} timeout={500} classNames=\"gasto\">\r\n                                        <Gasto  gasto={gasto} eliminarGasto={eliminarGasto}></Gasto>\r\n                                   </CSSTransition>\r\n                              )}\r\n                    </TransitionGroup>\r\n                         <li className=\"list-group-item d-flex justify-content-between align-items-center font-weight-bolder border-top border-primary\">Total: <span className=\"p-3 bg-primary text-white\">$ {presupuesto - restante}</span></li>\r\n               </ul>\r\n\r\n          </div>\r\n     );\r\n}\r\n\r\nListado.propTypes = {\r\n     title: PropTypes.string.isRequired,\r\n     gastos: PropTypes.array.isRequired,\r\n     presupuesto: PropTypes.number.isRequired,\r\n     restante: PropTypes.number.isRequired,\r\n     eliminarGasto: PropTypes.func.isRequired\r\n}\r\nexport default Listado;","import React, {useState, useEffect} from 'react';\r\nimport Form from './Form';\r\nimport Listado from './Listado';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Gastos = ({changeRestante, restante, presupuesto}) => {\r\n     const [gastos, changeGastos] = useState([]);\r\n     const agregarGasto = (gasto) => {\r\n          changeGastos([\r\n               ...gastos,\r\n               gasto\r\n          ])\r\n     }\r\n     const eliminarGasto = (id) => {\r\n          const newgastos = gastos.filter(gasto => gasto.id !== id);\r\n          changeGastos([\r\n               ...newgastos\r\n          ])\r\n     }\r\n     useEffect(() => {\r\n          let total = 0;\r\n          gastos.forEach((gasto)=>{\r\n               total += gasto.costo\r\n          })\r\n          changeRestante(presupuesto - total);\r\n          // eslint-disable-next-line\r\n     }, [gastos])\r\n\r\n     if(!presupuesto) return null;\r\n     return (\r\n          <section className=\"gastos py-4\">\r\n               <div className=\"container\">\r\n                    <div className=\"row\">\r\n                         <Form title=\"Agrega tus gastos aquÃ­\" agregarGasto={agregarGasto} restante={restante}></Form>\r\n                         <Listado title=\"Listado\" gastos={gastos} presupuesto={presupuesto} restante={restante} eliminarGasto={eliminarGasto}></Listado>\r\n                    </div>\r\n               </div> \r\n          </section>\r\n     );\r\n}\r\nGastos.propTypes = {\r\n     changeRestante: PropTypes.func.isRequired,\r\n     restante: PropTypes.number.isRequired,\r\n     presupuesto: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Gastos;","import React, {Fragment, useState} from 'react';\nimport Header from './components/Header';\nimport Question from './components/Question';\nimport Gastos from './components/Gastos';\nfunction App() {\n  const [presupuesto, changePresupuesto] = useState(0);\n  const [restante, changeRestante] = useState(0);\n\n  const agregarPresupuesto = (presupuesto) => {\n    changePresupuesto(presupuesto)\n  }\n  const agregarRestante = (restante) => {\n    changeRestante(restante)\n  }\n\n\n  return (\n    <Fragment>\n      <Header title=\"Gasto Semanal Hoy\" />\n      <main>\n          <Question title=\"Coloca tu presupuesto\" agregarPresupuesto={agregarPresupuesto} agregarRestante={agregarRestante} estado={presupuesto}></Question>\n          <Gastos changeRestante={changeRestante} restante={restante} presupuesto={presupuesto}></Gastos>\n      </main>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}